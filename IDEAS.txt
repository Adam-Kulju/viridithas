ideas for viri
MAJOR:
- tablebases
-- root-optimal play (exclude all moves that change the game-theoretic value of the position)
-- in-tree tablebase probing (use the tablebase to prune moves when the search hits TB positions)
- docs
- type-safety overhaul

MINOR:
- tune search parameters
- tune move generation (check evasions?)
- check out other engine's impls of countermoves and killer moves
- replace all the false/true constgen stuff with a proper type.
- alpha pruning
- increase maxdepth just in case.
- fullwindow on big scores (+30?)
- uci bench extension
- remove `as` casts and unsafe code
- perft divide
- try to reduce attr use, it's ugly.
- make FEN conversion not halt singlethreaded when writing to file. or generally.
- replace uses of iter().position() with a linear map type.
- endgame material combination guarding. (see if SF has any good "winnability" tricks)
- "go mate X"
- the slow part of deduplication is the file I/O, consider mmap?.
- record percentage of position where TT move saves movegen - similar for captures when we get staged movegen.
- multipv. put the moves in ThreadData and use ROOT.
- tune time-management multipliers at long TC.